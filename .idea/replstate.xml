<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1438388029818">{:repl-history {:ide [], :local [&quot;(re-find #\&quot;\\d+\&quot; \&quot;abc123\&quot;)&quot; &quot;(re-find #\&quot;sivraj status\&quot; \&quot;sivraj status\&quot;)&quot; &quot;(boolean (re-find #\&quot;sivraj status\&quot; \&quot;sivraj status\&quot;))&quot; &quot;(keyword \&quot;sivraj status\&quot;)&quot; &quot;(clojure.string/replace-first \&quot;sivraj status\&quot; #\&quot;sivraj\&quot; \&quot;\&quot;)&quot; &quot;(clojure.string/split #\&quot; \&quot; \&quot;sivraj status\&quot;)&quot; &quot;(clojure.string/split \&quot;sivraj status\&quot; #\&quot; \&quot;)&quot; &quot;(clojure.string/split (clojure.string/replace-first \&quot;sivraj status\&quot;) #\&quot; \&quot;)&quot; &quot;(clojure.string/split (clojure.string/replace-first #\&quot;sivraj\&quot; \&quot;\&quot;) #\&quot; \&quot;)&quot; &quot;(clojure.string/replace-first \&quot;sivraj status \&quot; #\&quot;sivraj\&quot;)&quot; &quot;(clojure.string/replace-first \&quot;sivraj status \&quot; #\&quot;sivraj\&quot; \&quot;\&quot;)&quot; &quot;(clojure.string/split (clojure.string/replace-first \&quot;sivraj stats\&quot; #\&quot;sivraj\&quot; \&quot;\&quot;) #\&quot; \&quot;)&quot; &quot;(doc tail)&quot; &quot;(doc rest)&quot; &quot;(rest (clojure.string.split \&quot;sivraj status\&quot; #\&quot; \&quot;))&quot; &quot;var a = 1&quot; &quot;(def s \&quot;sivraj status\&quot;)&quot; &quot;(def a (clojure.string/split s #\&quot; \&quot;))&quot; &quot;a&quot; &quot;(rest a)&quot; &quot;(rest (clojure.string/split s #\&quot; \&quot;))&quot; &quot;(rest (clojure.string/split \&quot;sivraj status\&quot; #\&quot; \&quot;))&quot; &quot;(defn status-command [] \&quot;Hello World\&quot;)&quot; &quot;(def command-map {:status status-command})&quot; &quot;(defn get-command-name [command]\n  (first (clojure.string/replace command #\&quot; \&quot;)))&quot; &quot;(defn get-command-name [command]\n  (second (clojure.string/split command #\&quot; \&quot;)))&quot; &quot;(get-command-name \&quot;sivraj status\&quot;)&quot; &quot;command-map&quot; &quot;(keyword get-command-name s)&quot; &quot;(get-command-name s)&quot; &quot;(keyword \&quot;status\&quot;)&quot; &quot;(keyword (get-command-name s) command-map)&quot; &quot;(keyword (get-command-name s))&quot; &quot;(get command-map :status)&quot; &quot;((get command-map :status))&quot; &quot;(defn run-command [command]\n  (let [command-name (get-command-name command)]\n    (println command-name)))&quot; &quot;(defn run-command [command]\n  (let [command-key (keyword (get-command-name command))]\n    (get command-map command-key)))&quot; &quot;(defn run-command [command]\n  (let [command-key (keyword (get-command-name command))]\n    ((get command-map command-key))))&quot; &quot;(run-command s)&quot;], :remote []}}</component>
</project>